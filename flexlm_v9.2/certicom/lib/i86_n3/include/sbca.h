/*+
 * sbca.h : This is the  Certification Authority Security Builder module 
 *    header file. 
 *    This file must be included in the source file of the application 
 *        requiring the EC Security Builder supported CA functionality. 
 *
 * This is an automatically generated file. Do not edit.
 *
 * Description: This header file holds the prototypes and 
 *              interface declaration for the following functions.        
 *      
 *  sb_ecdsaGenCert()
 *  sb_ecdsaPwdGenCert()
 *  sb_ecnrGenCert()
 *  sb_ecnrPwdGenCert()
 *  sb_ecdsaVerifyCert()
 *  sb_ecnrVerifyCert()
 *  sb_ecdsaParseCert()
 *  sb_ecnrParseCert()
 *
 *---------------------------------------------------------------------
 * Conditional compilations:
 *      None.
 *---------------------------------------------------------------------
 * Notes:
 *      None.
 *
  * 
  * 
  * This software contains trade secrets and confidential information of Certicom Corp.
  * (c) Copyright Certicom Corp. 1997-1998
-*/
#ifndef SBCA_H
#define SBCA_H    1



    /* 
     * sbdsa.h provides the ecdsa signature and verification 
     *          functions.
     */
#include "sbdsa.h"

    /*
     * sbnr.h provides the ecnr signature and verification 
     *  functions.
     */
#include "sbnr.h"


    /*--SB_ONE_OCTET
     *  This is an octet count of one.
     */
#define SB_ONE_OCTET        1

    /*--SB_CERT_DSIZE_OCT_LEN
     *  This is the number of octets used to 
     *  store the length of a certificate
     *  component.
     */
#define SB_CERT_DSIZE_OCT_LEN   ( 2 * SB_ONE_OCTET )

    /*--SB_OCTET_BITS 
     * This is the number of bits in an octet.
     */
#define SB_OCTET_BITS       8
     
    /*--SB_MAX_USER_DATA_LEN
     * This is the maximal length of user data.
     */
#define SB_MAX_USER_DATA_LEN    255

    /*--SB_MAX_CERT_INFO_LEN 
     * This is the maximal length of the certificate 
     * information.
     */
#define SB_MAX_CERT_INFO_LEN    ( SB_CERT_DSIZE_OCT_LEN + \
                  (SB_PUB_KEY_LEN) + \
                      SB_ONE_OCTET + SB_MAX_USER_DATA_LEN )

    /*--SB_MAX_ECDSA_CERT_LEN
     * This is the maximal length of an ECDSA certificate
     */
#define SB_MAX_ECDSA_CERT_LEN   (  SB_MAX_CERT_INFO_LEN + \
                   SB_CERT_DSIZE_OCT_LEN + \
                  (SB_ECDSA_SIGNATURE_SIZE)  )


    /*--SB_MAX_ECNR_CERT_LEN
     * This is the maximal length of an ECNR certificate
     */
#define SB_MAX_ECNR_CERT_LEN    (  SB_MAX_CERT_INFO_LEN + \
                   SB_CERT_DSIZE_OCT_LEN + \
                   (SB_ECNR_SIGNATURE_LENGTH)  )

   /*
    * The validation status returned by the
    * certificate verification function. 
    * INVALID_SB_CERT - is zero 
    * VALID_SB_CERT   - is one 
    */
typedef enum {
        INVALID_SB_CERT,
        VALID_SB_CERT
         } sb_Validate;



    /*
     * This data structure is used to 
     * housed the API representation of the
     * user data. The user data is assembled and
     * provided by the application. 
     */
    typedef struct userdata
    {
    unsigned int size;  /* The actual length of the User Data. */
    unsigned char userData[SB_MAX_USER_DATA_LEN]; /* The user data. */
    }sb_UserData;


    /*
     * This data structure is used to 
     * housed the API representation of the
     * certificate information. This contains
     * the API representation of the user data
     * and the public key.
     */
    typedef struct certinfo
    {
    sb_PublicKey subjectPublicKey; /* Subscriber's public key. */
    sb_UserData userInfo;     /* User Data, defined by the CA. */
    }sb_CertInfo;



    /*
     * This data structure is used to 
     * housed the API representation of the
     * ECDSA certificate.  Certificates are 
     * generated by this API.
     */
    typedef struct ecdsacert 
    {
    unsigned int size;    /* The actual length of the certificate. */
    unsigned char cert[SB_MAX_ECDSA_CERT_LEN];     /* The certificate. */
    }sb_CertECDSA;



    /*
     * This data structure is used to 
     * housed the API representation of the
     * ECNR certificate.  Certificates are 
     * generated by this API.
     */
    typedef struct ecnrcert 
    {
    unsigned int size;    /* The actual length of the certificate. */
    unsigned char cert[SB_MAX_ECNR_CERT_LEN];      /* The certificate. */
    }sb_CertECNR;



    /*
     * CA API function Prototypes
     */

/*---sb_ecdsaGenCert()
 * This function generates a certificate for the caller using 
 * ECSSA-DSA.
 * The CA and subscriber key pairs must be generated prior
 * to calling this function. The caller is expected to provide
 * the certificate information and the signing key. The 
 * certificate generated by this function is based on the
 * certificate information and the certificate signature 
 * produced with the signing key of the CA.
 *
 * Notes: None
 *
 * Returns: The return codes issued by this function are as follows.
 *  SB_SUCCESS           -- The operation completed successfully.
 *  SB_FAILURE           -- The operation failed.
 *  SB_NO_GLOBAL_DATA    -- The global data is null.
 *  SB_NO_CERT           -- The certificate is null.
 *  SB_NO_CERT_INFO      -- The certificate information is null.
 *  SB_NO_PRIVATE_KEY    -- The CA's unprotected signing key is null.
 *  SB_BAD_PUBLIC_KEY    -- The public key length in the certificate information is invalid.
 *  SB_BAD_USER_DATA_LEN -- The user data length in the certificate information is invalid.
 *  SB_BAD_SIGNATURE_LEN -- The signature length in the certificate information is invalid.
 *  SB_BAD_PRIVATE_KEY   -- The CA's unprotected signing key is invalid.
 *  SB_NOT_INITIALIZED   -- The global data is not initialised.
 */
int
sb_ecdsaGenCert(
    void *globalData,
    /*[input]
     * The Security Builder global data area.
     * This is expected to be initialised to 
     * non-null values.
     */
    const sb_CertInfo *certInfo,
    /*[input]
     * The certificate information to be signed 
     * with the CA's private key. 
     * It is non-null.
     */
    const sb_PrivateKey *issuerPrivateKey,
    /*[input]
     * The CA's private key.
     * This is non-null.
     */
    sb_CertECDSA *certificate
    /*[output]
     * The caller is responsible for allocating memory for
     * this data item. A certificate is contained in this 
     * data item when this function executes successfully. 
     * Otherwise, this item is undefined.
     */ 
    );


/*--sb_ecdsaPwdGenCert()
 * This function generates a certificate for the caller using 
 * ECSSA-DSA.
 * The CA and subscriber key pairs must be generated prior
 * to calling this function. The caller is expected to provide
 * the certificate information and the signing key. The
 * signing key is protected with a password.
 * The certificate generated by this function is based on the
 * certificate information and the certificate signature 
 * produced with the protected signing key of the CA.
 *
 * Notes: None
 *
 * Returns: The return codes issued by this function are as follows.
 *  SB_SUCCESS              -- The operation completed successfully.
 *  SB_FAILURE              -- The operation failed.
 *  SB_NO_GLOBAL_DATA       -- The global data is null.
 *  SB_NO_CERT              -- The certificate is null.
 *  SB_NO_CERT_INFO         -- The certificate information is null.
 *  SB_NO_PROT_PRIVATE_KEY  -- The CA's protected signing key is null.
 *  SB_NO_PWD               -- The password for the CA's protected signing key is null.
 *  SB_BAD_PUBLIC_KEY       -- The public key length in the certificate information is invalid.
 *  SB_BAD_USER_DATA_LEN    -- The user data length in the certificate information is invalid.
 *  SB_BAD_SIGNATURE_LEN    -- The signature length in the certificate information is invalid.
 *  SB_BAD_PROT_PRIVATE_KEY -- The CA's protected signing key is invalid.
 *  SB_BAD_PWD_LEN          -- The password length of the CA's protected signing key is invalid.
 *  SB_NOT_INITIALIZED      -- The global data is not initialised.
 */
int
sb_ecdsaPwdGenCert(
    void *globalData,
    /*[input]
     * The Security Builder global data area.
     * This is expected to be initialised to 
     * non-null values.
     */
    const sb_CertInfo *certInfo,
    /*[input]
     * The certificate information to be signed 
     * with the CA's private key.
     * It is non-null.
     */
    const unsigned int pwdLength,
    /*[input]
     * Length of the password; the maximum length is 
     * SB_MAX_PASSWORD_LEN bytes and the minimal length
     * is 1.
     */
    const unsigned char password[],
    /*[input]
     * The password used to protect the
     * CA private key. 
     * This in non-null with a length of pwdLength.
     */
    const sb_ProtectedKey *issuerPrivateKey,
    /*[input]
     * The password protected CA's private key.
     * This is non-null.
     */
    sb_CertECDSA *certificate
    /*[output]
     * The caller is responsible for allocating memory for
     * this data item. A certificate is contained in this 
     * data item when this function executes successfully. 
     * Otherwise, this item is undefined.
     */ 
    );


/*--sb_ecnrGenCert()
 * This function generates a certificate for the caller using 
 * ECSSA-NR.
 * The CA and subscriber key pairs must be generated prior
 * to calling this function. The caller is expected to provide
 * the certificate information and the signing key. The 
 * certificate generated by this function is based on the 
 * certificate information and the certificate signature 
 * produced with the signing key of the CA.
 *
 * Notes: None
 *
 * Returns: The return codes issued by this function are as follows.
 *  SB_SUCCESS           -- The operation completed successfully.
 *  SB_FAILURE           -- The operation failed.
 *  SB_NO_GLOBAL_DATA    -- The global data is null.
 *  SB_NO_CERT           -- The certificate is null.
 *  SB_NO_CERT_INFO      -- The certificate information is null.
 *  SB_NO_PRIVATE_KEY    -- The CA's unprotected signing key is null.
 *  SB_BAD_PUBLIC_KEY    -- The public key length in the certificate information is invalid.
 *  SB_BAD_USER_DATA_LEN -- The user data length in the certificate information is invalid.
 *  SB_BAD_SIGNATURE_LEN -- The signature length in the certificate information is invalid.
 *  SB_BAD_PRIVATE_KEY   -- The CA's unprotected signing key is invalid.
 *  SB_NOT_INITIALIZED   -- The global data is not initialised.
 */
int
sb_ecnrGenCert(
    void *globalData,
    /*[input]
     * The Security Builder global data area.
     * This is expected to be initialised to 
     * non-null values.
     */
    const sb_CertInfo *certInfo,
    /*[input]
     * The certificate information to be signed 
     * with the CA's private key. 
     * It is non-null.
     */
    const sb_PrivateKey *issuerPrivateKey,
    /*[input]
     * The CA's private key.
     * This is non-null.
     */
    sb_CertECNR *certificate
    /*[output]
     * The caller is responsible for allocating memory for
     * this data item. A certificate is contained in this 
     * data item when this function executes successfully. 
     * Otherwise, this item is undefined.
     */ 
    )    ;


/*--sb_ecnrPwdGenCert()
 * This function generates a certificate for the caller using 
 * ECSSA-NR.
 * The CA and subscriber key pairs must be generated prior
 * to calling this function. The caller is expected to provide
 * the certificate information and the signing key.
 * The signing key is protected with a password.
 * The certificate generated by this function is based on the 
 * certificate information and the certificate signature 
 * produced with the protected signing key of the CA.
 *
 * Notes: None
 *
 * Returns: The return codes issued by this function are as follows.
 *  SB_SUCCESS              -- The operation completed successfully.
 *  SB_FAILURE              -- The operation failed.
 *  SB_NO_GLOBAL_DATA       -- The global data is null.
 *  SB_NO_CERT              -- The certificate is null.
 *  SB_NO_CERT_INFO         -- The certificate information is null.
 *  SB_NO_PROT_PRIVATE_KEY  -- The CA's protected signing key is null.
 *  SB_NO_PWD               -- The password for the CA's protected signing key is null.
 *  SB_BAD_PUBLIC_KEY       -- The public key length in the certificate information is invalid.
 *  SB_BAD_USER_DATA_LEN    -- The user data length in the certificate information is invalid.
 *  SB_BAD_SIGNATURE_LEN    -- The signature length in the certificate information is invalid.
 *  SB_BAD_PROT_PRIVATE_KEY -- The CA's protected private key is invalid.
 *  SB_BAD_PWD_LEN          -- The length of the protected signing key password is invalid.
 *  SB_NOT_INITIALIZED      -- The global data is not initialised.
 */
int
sb_ecnrPwdGenCert(
    void *globalData,
    /*[input]
     * The Security Builder global data area.
     * This is expected to be initialised to
     * non-null values.
     */
    const sb_CertInfo *certInfo,
    /*[input]
     * The certificate information to be signed 
     * with the CA's private key. 
     * It is non-null.
     */
    const unsigned int pwdLength,
    /*[input]
     * Length of the password; the maximum length is 
     * SB_MAX_PASSWORD_LEN bytes and the minimal length
     * is 1.
     */
    const unsigned char password[],
    /*[input]
     * The password used to protect the
     * CA private key. 
     * This in non-null with a length of pwdLength.
     */
    const sb_ProtectedKey *issuerPrivateKey,
    /*[input]
     * The password protected CA's private key.
     * This is non-null.
     */
    sb_CertECNR *certificate
    /*[output]
     * The caller is responsible for allocating memory for
     * this data item. A certificate is contained in this 
     * data item when this function executes successfully. 
     * Otherwise, this item is undefined.
     */ 
    );


/*--sb_ecdsaVerifyCert()
 * This function authenticates a certificate generated by 
 * this module using ECSSA-DSA. The certificate is 
 * authenticate with the public key of the certificate issuer. 
 *
 * Notes: None
 *
 * Returns: The return codes issued by this function are as follows:
 *  SB_SUCCESS          -- The operation completed successfully.
 *  SB_FAILURE          -- The operation failed.
 *  SB_NO_GLOBAL_DATA   -- The global data is null.
 *  SB_NO_CERT          -- The certificate is null.
 *  SB_NO_OUTBUF        -- The verification status is null.
 *  SB_NO_PUBLIC_KEY    -- The CA's verification key is null.
 *  SB_BAD_PUBLIC_KEY   -- The verification key is invalid.
 *  SB_BAD_CERT_LEN     -- The certificate length is invalid.
 *  SB_BAD_CERT         -- The certificate is invalid.
 *  SB_NOT_INITIALIZED  -- The global data is not initialised.
 */
int
sb_ecdsaVerifyCert(
    void *globalData,
    /*[input]
     * The Security Builder global data area.
     * This is expected to be initialised to
     * non-null values.
     */
    const sb_CertECDSA *certificate,
    /*[input]
     * The certificate to be validated with
     * the CA's public key. This is non-null.
     */ 
    const sb_PublicKey *issuerPublicKey,
    /*[input]
     * The CA's public key.
     * This is non-null.
     */
    sb_Validate *status
    /*[output]
     * The caller is responsible for the allocation
     * of memory for this data item.
     * This data item contains the validation status,
     * VALID_SB_CERT or INVALID_SB_CERT when the function executes 
     * successfully. Otherwise, this data item is undefined.
     */
    );


/*--sb_ecnrVerifyCert()
 * This function authenticates a certificate generated by 
 * this module using ECSSA-NR. The certificate is authenticate 
 * with the public key of the certificate issuer. 
 *
 * Notes: None
 *
 * Returns: The return codes issued by this function are as follows:
 *  SB_SUCCESS          -- The operation completed successfully.
 *  SB_FAILURE          -- The operation failed.
 *  SB_NO_GLOBAL_DATA   -- The global data is null.
 *  SB_NO_CERT          -- The certificate is null.
 *  SB_NO_OUTBUF        -- The verification status is null.
 *  SB_NO_PUBLIC_KEY    -- The CA's verification key is null.
 *  SB_BAD_PUBLIC_KEY   -- The verification key is invalid.
 *  SB_BAD_CERT_LEN     -- The certificate length is invalid.
 *  SB_BAD_CERT         -- The certificate is invalid.
 *  SB_NOT_INITIALIZED  -- The global data is not initialised.
 */
int
sb_ecnrVerifyCert(
    void *globalData,
    /*[input]
     * The Security Builder global data area.
     * This is expected to be initialised to
     * non-null values.
     */
    const sb_CertECNR *certificate,
    /*[input]
     * The certificate to be validated with
     * the CA's public key. This is non-null.
     */ 
    const sb_PublicKey *issuerPublicKey,
    /*[input]
     * The CA's public key.
     * This is non-null.
     */
    sb_Validate *status
    /*[output]
     * The caller is responsible for the allocation
     * of memory for this data item.
     * This data item contains the validation status,
     * VALID_SB_CERT or INVALID_SB_CERT when the function executes 
     * successfully. Otherwise, this data item is undefined.
     */
    );
 

/*--sb_ecdsaParseCert()
 * This function extracts the certificate information from an
 * ECDSA certificate generated by this module. 
 *
 * Notes: None
 *
 * Returns: The return codes issued by this function are as follows:
 *  SB_SUCCESS          -- The operation completed successfully.
 *  SB_FAILURE          -- The operation failed.
 *  SB_NO_GLOBAL_DATA   -- The global data is null.
 *  SB_NO_CERT          -- The certificate is null.
 *  SB_NO_CERT_INFO     -- The certificate information is null.
 *  SB_BAD_CERT_LEN     -- The certificate length is invalid.
 *  SB_BAD_CERT         -- The certificate is invalid.
 *  SB_NOT_INITIALIZED  -- The global data is not initialised.
 */
int
sb_ecdsaParseCert(
    void *globalData,
    /*[input]
     * The Security Builder global data area.
     * This is expected to be initialised to
     * non-null values.
     */
    const sb_CertECDSA *certificate,
    /*[input]
     * Get the certificate information from this certificate.
     * This is non-null.
     */ 
    sb_CertInfo *certInfo
    /*[output]
     * The caller is responsible for allocating memory for
     * this data item. Certificate Information is contained
     * in this data item when this function executes 
     * successfully. Otherwise, this item is undefined.
     */
    );




/*--sb_ecnrParseCert()
 * This function extracts the certificate information from an
 * ECNR certificate generated by this module. 
 *
 * Notes: None
 *
 * Returns: The return codes issued by this function are as follows:
 *  SB_SUCCESS          -- The operation completed successfully.
 *  SB_FAILURE          -- The operation failed.
 *  SB_NO_GLOBAL_DATA   -- The global data is null.
 *  SB_NO_CERT          -- The certificate is null.
 *  SB_NO_CERT_INFO     -- The certificate information is null.
 *  SB_BAD_CERT_LEN     -- The certificate length is invalid.
 *  SB_BAD_CERT         -- The certificate is invalid.
 *  SB_NOT_INITIALIZED  -- The global data is not initialised.
 */
int
sb_ecnrParseCert(
    void *globalData,
    /*[input]
     * The Security Builder global data area.
     * This is expected to be initialised to
     * non-null values.
     */
    const sb_CertECNR *certificate,
    /*[input]
     * Get the certificate information from this certificate.
     * This is non-null.
     */ 
    sb_CertInfo *certInfo
    /*[output]
     * The caller is responsible for allocating memory for
     * this data item. Certificate Information is contained
     * in this data item when this function executes 
     * successfully. Otherwise, this item is undefined.
     */
    );

#endif /*SBCA_H*/

