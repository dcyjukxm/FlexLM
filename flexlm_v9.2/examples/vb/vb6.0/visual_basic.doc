{\rtf1\ansi\ansicpg1252\uc1 \deff11\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f11\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}
{\f28\froman\fcharset238\fprq2 Times New Roman CE;}{\f29\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f31\froman\fcharset161\fprq2 Times New Roman Greek;}{\f32\froman\fcharset162\fprq2 Times New Roman Tur;}
{\f33\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f34\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f35\froman\fcharset186\fprq2 Times New Roman Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;
\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;
\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \f11\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}}{\info
{\author Nobody}{\operator Nobody}{\creatim\yr2000\mo12\dy18\hr8\min3}{\revtim\yr2002\mo2\dy8\hr14\min21}{\version4}{\edmins6}{\nofpages4}{\nofwords1133}{\nofchars6463}{\*\company GLOBEtrotter Software, Inc.}{\nofcharsws0}{\vern8247}}
\widowctrl\ftnbj\aendnotes\aftnstart0\hyphhotz0\aftnnar\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\lytprtmet\hyphcaps0\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3
\jcompress\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot\nolnhtadjtbl \fet0\sectd \linex0\endnhere\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3
\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain 
\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \f11\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b\f0\fs32 FLEXlm for VisualBasic}{\f0 
\par 
\par 
\par FLEXlm is simple to use for Visual Basic.  Because of differences between Basic and C, a few minor changes have  been made in the API, but otherwise it follows the Simple API of FLEXlm.
\par 
\par The functions available from Visual Basic are:
\par }{\b\f0 LP_SETUP
\par LP_CHECKOUT
\par LP_CHECKIN
\par LP_HEARTBEAT
\par LP_ERRSTRING
\par LC_CRYPTSTR
\par LC_HOSTID
\par }{\f0 
\par These functions are included in the }{\i\f0 LMCLIENT.BAS}{\f0  file which needs to be included in your Visual Basic project.  Here are detailed descriptions of each function:
\par 
\par 
\par 
\par }{\b\f0 LP_SETUP(Name As String, Vendor_Key1 as Long, Vendor_Key2 As Long, Vendor_Key3 as Long, Vendor_Key4 as Long, XorValue1 As Long, XorValue2 As Long) As Integer
\par }{\f0 
\par This Function takes as parameters your Vendor Keys 1-4 and the XOR'd value of Vendor_key5 and your Encryption Seeds. This
 routine only needs to be called once during your programs operation.  It must be called before calling any other FLEXlm function.  It returns 0 if not error, or 1 if an error occured by not
\par specifying the proper arguments.
\par 
\par When you receive FLEXlm, you will be sent an email such as this:
\par 
\par 
\par FLEXlm v7.x vendor keys for "Typical Sample Company " (daemon name: "Typsample")
\par 
\par \tab Your FLEXlm vendor key #1 is "0xe33c8917"
\par \tab Your FLEXlm vendor key #2 is "0x42bc26e4"
\par \tab Your FLEXlm vendor key #3 is "0x9a5a456f"
\par \tab Your FLEXlm vendor key #4 is "0xd6993e1d"
\par \tab Your FLEXlm vendor key #5 is "0xbf8e6775"
\par 
\par     These keys enable the following platforms:
\par 
\par \tab alpha_osf hp700 rs6000 sgi64 sun windows winnt_intel
\par 
\par The values that you pass into LP_SETUP are obtained from this E-mail.  Note that the numbers are preceed
\par by a 0x . This represents a Hexidecimal number. In Visual Basic this is represented by preceeding the number with a 'H'.
\par 
\par }{\b\f0 IMPORTANT NOTE ABOUT ENCRYPTION_SEEDS:}{\f0 
\par 
\par The ENCRYPTION_SEED1 and ENCRYPTION_SEED2 in  are numbers which are key to FLEXlm security.  By default, they are
\par \tab 
\par ENCRYPTION_SEED1 =  H87654321
\par ENCRYPTION_SEED2  = H12345678
\par \tab 
\par Each vendor must ensure that these with numbers are replaced with numbers which are unique to your company and are kept secret.  Only so
meone with access to these numbers can generate license files that will work with your application.  MAKE SURE the numbers are not left to the defaults.
\par 
\par You should define as a Const the result of the XOR of Vendor_Key5 and your Encryption Seeds.  This is to prevent the appearance of these numbers in your source, to minimize the compromising of your encryption seeds.
\par 
\par Example:
\par CONST XorValue1 As Long  = H87654321 Xor H45f9aeB0
\par CONST XorValue2 As Long  = H12345678 Xor H45f9aeB0
\par where H87654321 H12345678 are an example of  Encryption Seeds, and H45f9aeb0 is an example of Vendor_Key5
\par 
\par All parameters except for Name are Long integers.  Name is a string.
\par 
\par 
\par }{\b\f0 LP_CHECKOUT(policy As Integer, feature As String, version As String, nlic As Integer, license_path As String, lp_handle As Long) as Integer
\par }{\f0 
\par This function is just like the lp_checkout call as detailed in the FLEXlm Programmers Guide Chapter 6.3.  
\par The major difference in this call compared to the 'C' call is that the LPCODE structure is not passed.  This
\par is generated by the LP_SETUP call.  All of the other parameters are the same as the 'C' call except for lp_handle, which is a Basic variable defined as a Long.
\par 
\par We have defined the following constants that can be OR'd together for the }{\b\f0 policy}{\f0  variable.
\par The policies are:
\par LM_RESTRICTIVE
\par LM_QUEUE
\par LM_FAILSAFE
\par LM_LENIENT
\par The modifiers are:
\par LM_MANUAL_HEARTBEAT
\par LM_RETRY_RESTRICTIVE
\par 
\par The }{\b\f0 policy}{\f0  is determined by choosing one of the policies and adding any of the modifiers to it.  See the FLEXlm Programmers Guide Chapter 4.7 for more information.
\par 
\par The return value of this function is 0 if successful, or the FLEXlm error number if not.
\par 
\par }{\b\f0 LP_CHECKIN(lp_handle As Long) As Integer
\par }{\f0 
\par Checks in feature that was checked out.  }{\b\f0 lp_handle }{\f0 needs to be the same value that was returned from LP_CHECKOUT.  See Programmers Manual section 6.4
\par 
\par  
\par }{\b\f0 LP_HEARTBEAT(lp_handle As Long, num_reconnects As Long, num_minutes As Long) as Integer
\par }{\f0 
\par Allows checking of HOSTID, or to check if the server is still connected.   See Programmers Manual section 6.6
\par 
\par }{\b\f0 
\par LP_ERRSTRING (lp_handle As Long, errors As String, errors_length as Integer) As Integer
\par 
\par }{\f0 This function returns the text of the current error in errors.
\par 
\par }{\b\f0 errors}{\f0   It should be filled with spaces before calling this function.  You can then use the RTRIM$ function to remove trailing blanks.  
\par 
\par }{\b\f0 Errors_length}{\f0  is the number of characters in errors.  
If the length of  the generated string is longer than the specified length, it will not be copied into errors.  errors_length will be set to the length of the string required to contain the error text. 
\par 
\par See Programmers Manual section 6.5 for more information
\par 
\par 
\par }{\b\f0 LC_CRYPTSTR (str As String, return_str As String, return_length As Integer, errors as String, errors_length as Integer, Vendor_Key5) As Integer
\par }{\f0 
\par Allows the generation of licenses.  Given a license file it will fill in the 20 character codes.  
\par 
\par }{\b\f0 str}{\f0  is a string that has in it the contents of the license file that is to be authenticated. 
\par 
\par }{\b\f0 return_str }{\f0 is where the newly generated license string will be placed.  It should be filled with spaces before calling this function.  You can then use the RTRIM$ function to remove trailing blanks.
\par 
\par }{\b\f0 return_length}{\f0  is the length of  the return_string buffer.  If the length of  the generated string is longer than the specified length, it will not be copied into the return_string.  return_length will be set to the length 
of the string required to contain the error text. 
\par }{\b\f0 
\par errors }{\f0 is where any errors resulting from generating the  license string will be placed.  It should be filled with spaces before calling this function.  You can then use the RTRIM$ function to remove trailing blanks. 
\par }{\b\f0 
\par errors_length}{\f0  is the length of  the error_string buffer.  If the length of  the generated string is longer than the specified length, it will not be copied into the error_string.  error_string_length will be set to the
\par length of the string required to contain the error text. 
\par 
\par }{\b\f0 Vendor_Key5}{\f0  is your assigned fifth vendor key.  If you use this function and distribute a program using this feature, the security of your Encryption Seeds could be compromised.  Care should be exercised in the operation of this function.

\par 
\par Function returns 0 if successful, or an error code if not.
\par 
\par This function is very similar to the lc_cryptstr function defined in the FLEXlm Reference Manual, section 4.12 .  The job, code, flag, and filename parameters are defaulted.  This results in using the LM_CRYPT_FORCE flag, and disabling the writing of erro
rs to a file.  The code variable is derived from the calling of LP_SETUP and the passing of Vendor_Key5 to the routine.
\par 
\par }{\b\f0 LC_HOSTID(id_type As Long, buf As String, buf_length as Integer) as Integer
\par 
\par }{\f0 This function allows you to obtain the Hostid of the system to use to generate a license.
\par Refer to the lmclient.bas for the HOSTID constant(i.e. HOSTID_DISK_SERIAL_NUM=11).
\par The following are the allowed values of id_type: 
\par HOSTID_ETHER     \tab \tab Ethernet address
\par HOSTID_USER\tab \tab \tab Username 
\par HOSTID_DISPLAY \tab \tab Display\tab 
\par HOSTID_HOSTNAME \tab \tab Computer Name
\par HOSTID_DISK_SERIAL_NUM \tab Disk Volume Serial Number\tab \tab 
\par HOSTID_INTERNET   \tab \tab IP address
\par HOSTID_FLEXID1_KEY \tab (FLEXID=7-xxxx)
\par HOSTID_FLEXID2_KEY \tab (FLEXID=8-xxxxxxxxxx)\tab \tab }{\b\f0 
\par 
\par buf  }{\f0 is where the ascii representation of the specifed hostid will be placed. It should be filled with spaces before calling this function.  You can then use the RTRIM$ function to remove trailing blanks. 
\par }{\b\f0 
\par buf_length}{\f0  is the length of  the hostid_string buffer.  If the length of  the generated string is longer than the 
specified length, it will not be copied into the hostid_string.  hostid_string_length will be set to the length of the string required to contain the hostid text. 
\par 
\par Function returns 0 if successful, or an error code if not.
\par }}